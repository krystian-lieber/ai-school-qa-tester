{"prompt": "Generate a unit test for this function: \n```python\ndef add(a, b):\n    return a + b\n```", "completion": "```python\nimport unittest\n\nclass TestAddFunction(unittest.TestCase):\n    def test_add_positive_numbers(self):\n        self.assertEqual(add(2, 3), 5)\n\n    def test_add_negative_numbers(self):\n        self.assertEqual(add(-1, -1), -2)\n\n    def test_add_positive_and_negative_numbers(self):\n        self.assertEqual(add(-1, 1), 0)\n\n    def test_add_zero(self):\n        self.assertEqual(add(0, 0), 0)\n\nif __name__ == '__main__':\n    unittest.main()\n```"}
{"prompt": "Generate a unit test for this function: \n```python\ndef multiply(a, b):\n    return a * b\n```", "completion": "```python\nimport unittest\n\nclass TestMultiplyFunction(unittest.TestCase):\n    def test_multiply_positive_numbers(self):\n        self.assertEqual(multiply(2, 3), 6)\n\n    def test_multiply_negative_numbers(self):\n        self.assertEqual(multiply(-1, -1), 1)\n\n    def test_multiply_positive_and_negative_numbers(self):\n        self.assertEqual(multiply(-1, 1), -1)\n\n    def test_multiply_by_zero(self):\n        self.assertEqual(multiply(0, 5), 0)\n\nif __name__ == '__main__':\n    unittest.main()\n```"}
{"prompt": "Generate a unit test for this function: \n```python\ndef divide(a, b):\n    if b == 0:\n        raise ValueError('Cannot divide by zero')\n    return a / b\n```", "completion": "```python\nimport unittest\n\nclass TestDivideFunction(unittest.TestCase):\n    def test_divide_positive_numbers(self):\n        self.assertEqual(divide(6, 3), 2)\n\n    def test_divide_negative_numbers(self):\n        self.assertEqual(divide(-6, -3), 2)\n\n    def test_divide_positive_and_negative_numbers(self):\n        self.assertEqual(divide(-6, 3), -2)\n\n    def test_divide_by_zero(self):\n        with self.assertRaises(ValueError):\n            divide(6, 0)\n\nif __name__ == '__main__':\n    unittest.main()\n```"}
{"prompt": "Generate a unit test for this function: \n```python\ndef subtract(a, b):\n    return a - b\n```", "completion": "```python\nimport unittest\n\nclass TestSubtractFunction(unittest.TestCase):\n    def test_subtract_positive_numbers(self):\n        self.assertEqual(subtract(5, 3), 2)\n\n    def test_subtract_negative_numbers(self):\n        self.assertEqual(subtract(-5, -3), -2)\n\n    def test_subtract_positive_and_negative_numbers(self):\n        self.assertEqual(subtract(-5, 3), -8)\n\n    def test_subtract_zero(self):\n        self.assertEqual(subtract(0, 0), 0)\n\nif __name__ == '__main__':\n    unittest.main()\n```"}
{"prompt": "Generate a unit test for this function: \n```python\ndef is_pangram(s):\n    return set('abcdefghijklmnopqrstuvwxyz') <= set(s.lower())\n```", "completion": "```python\nimport unittest\n\nclass TestIsPangramFunction(unittest.TestCase):\n    def test_is_pangram_positive(self):\n        self.assertTrue(is_pangram('The quick brown fox jumps over the lazy dog'))\n\n    def test_is_pangram_negative(self):\n        self.assertFalse(is_pangram('Hello world'))\n\n    def test_is_pangram_empty_string(self):\n        self.assertFalse(is_pangram(''))\n\n    def test_is_pangram_missing_letters(self):\n        self.assertFalse(is_pangram('The quick brown fox jumps over the lazy'))\n\nif __name__ == '__main__':\n    unittest.main()\n```"}
{"prompt": "Generate a unit test for this function: \n```python\ndef is_substring(s1, s2):\n    return s1 in s2\n```", "completion": "```python\nimport unittest\n\nclass TestIsSubstringFunction(unittest.TestCase):\n    def test_is_substring_positive(self):\n        self.assertTrue(is_substring('hello', 'hello world'))\n\n    def test_is_substring_negative(self):\n        self.assertFalse(is_substring('world', 'hello'))\n\n    def test_is_substring_empty_string(self):\n        self.assertTrue(is_substring('', 'hello'))\n\n    def test_is_substring_same_string(self):\n        self.assertTrue(is_substring('hello', 'hello'))\n\nif __name__ == '__main__':\n    unittest.main()\n```"}
{"prompt": "Generate a unit test for this function: \n```python\ndef is_valid_roman_numeral(s):\n    roman_numerals = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    for char in s[::-1]:\n        curr_value = roman_numerals[char]\n        if curr_value < prev_value:\n            total -= curr_value\n        else:\n            total += curr_value\n        prev_value = curr_value\n    return total > 0\n```", "completion": "```python\nimport unittest\n\nclass TestIsValidRomanNumeralFunction(unittest.TestCase):\n    def test_is_valid_roman_numeral_positive(self):\n        self.assertTrue(is_valid_roman_numeral('XIV'))\n\n    def test_is_valid_roman_numeral_negative(self):\n        self.assertFalse(is_valid_roman_numeral('IIII'))\n\n    def test_is_valid_roman_numeral_empty_string(self):\n        self.assertFalse(is_valid_roman_numeral(''))\n\n    def test_is_valid_roman_numeral_invalid_character(self):\n        self.assertFalse(is_valid_roman_numeral('XIVY'))\n\nif __name__ == '__main__':\n    unittest.main()\n```"}
{"prompt": "Generate a unit test for this function: \n```python\ndef is_valid_isbn(isbn):\n    isbn = isbn.replace('-', '')\n    if len(isbn) != 10:\n        return False\n    total = 0\n    for i in range(9):\n        if not isbn[i].isdigit():\n            return False\n        total += int(isbn[i]) * (10 - i)\n    if isbn[9] != 'X' and not isbn[9].isdigit():\n        return False\n    if isbn[9] == 'X':\n        total += 10\n    else:\n        total += int(isbn[9])\n    return total % 11 == 0\n```", "completion": "```python\nimport unittest\n\nclass TestIsValidIsbnFunction(unittest.TestCase):\n    def test_is_valid_isbn_positive(self):\n        self.assertTrue(is_valid_isbn('0-306-40615-2'))\n\n    def test_is_valid_isbn_negative(self):\n        self.assertFalse(is_valid_isbn('0-306-40615-1'))\n\n    def test_is_valid_isbn_x_check_digit(self):\n        self.assertTrue(is_valid_isbn('0-306-40615-X'))\n\n    def test_is_valid_isbn_invalid_length(self):\n        self.assertFalse(is_valid_isbn('0-306-40615-22'))\n\n    def test_is_valid_isbn_invalid_character(self):\n        self.assertFalse(is_valid_isbn('0-306-4061A-2'))\n\nif __name__ == '__main__':\n    unittest.main()\n```"}
{"prompt": "Generate a unit test for this function: \n```python\ndef lcm(a, b):\n    if a == 0 or b == 0:\n        return 0\n    else:\n        return abs(a * b) // gcd(a, b)\n```", "completion": "```python\nimport unittest\n\nclass TestLcmFunction(unittest.TestCase):\n    def test_lcm_positive_numbers(self):\n        self.assertEqual(lcm(4, 5), 20)\n\n    def test_lcm_one_zero(self):\n        self.assertEqual(lcm(0, 5), 0)\n\n    def test_lcm_both_zeros(self):\n        self.assertEqual(lcm(0, 0), 0)\n\n    def test_lcm_negative_numbers(self):\n        self.assertEqual(lcm(-4, 5), 20)\n\nif __name__ == '__main__':\n    unittest.main()\n```"}
{"prompt": "Generate a unit test for this function: \n```python\ndef is_uppercase(s):\n    return s.isupper()\n```", "completion": "```python\nimport unittest\n\nclass TestIsUppercaseFunction(unittest.TestCase):\n    def test_is_uppercase_all_uppercase(self):\n        self.assertTrue(is_uppercase('HELLO'))\n\n    def test_is_uppercase_mixed_case(self):\n        self.assertFalse(is_uppercase('Hello'))\n\n    def test_is_uppercase_all_lowercase(self):\n        self.assertFalse(is_uppercase('hello'))\n\n    def test_is_uppercase_empty_string(self):\n        self.assertFalse(is_uppercase(''))\n\nif __name__ == '__main__':\n    unittest.main()\n```"}
{"prompt": "Generate a unit test for this function: \n```python\ndef sum_list(arr):\n    return sum(arr)\n```", "completion": "```python\nimport unittest\n\nclass TestSumListFunction(unittest.TestCase):\n    def test_sum_list_positive_numbers(self):\n        self.assertEqual(sum_list([1, 2, 3, 4, 5]), 15)\n\n    def test_sum_list_negative_numbers(self):\n        self.assertEqual(sum_list([-1, -2, -3, -4, -5]), -15)\n\n    def test_sum_list_mixed_numbers(self):\n        self.assertEqual(sum_list([-1, 0, 1, 2, 3]), 5)\n\n    def test_sum_list_empty_list(self):\n        self.assertEqual(sum_list([]), 0)\n\nif __name__ == '__main__':\n    unittest.main()\n```"}
{"prompt": "Generate a unit test for this function: \n```python\ndef average_list(arr):\n    return sum(arr) / len(arr) if arr else 0\n```", "completion": "```python\nimport unittest\n\nclass TestAverageListFunction(unittest.TestCase):\n    def test_average_list_positive_numbers(self):\n        self.assertAlmostEqual(average_list([1, 2, 3, 4, 5]), 3.0, places=7)\n\n    def test_average_list_negative_numbers(self):\n        self.assertAlmostEqual(average_list([-1, -2, -3, -4, -5]), -3.0, places=7)\n\n    def test_average_list_mixed_numbers(self):\n        self.assertAlmostEqual(average_list([-1, 0, 1, 2, 3]), 1.0, places=7)\n\n    def test_average_list_empty_list(self):\n        self.assertEqual(average_list([]), 0)\n\nif __name__ == '__main__':\n    unittest.main()\n```"}
